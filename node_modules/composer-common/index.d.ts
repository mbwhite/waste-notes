export class AclFile {
  static fromJSON(arg0?: any, arg1?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any);
  getIdentifier(): any;
  accept(arg0?: any, arg1?: any): any;
  getModelManager(): any;
  validate(): any;
  getAclRules(): any;
  getDefinitions(): any;
  toJSON(): any;
}
export class AclManager {
  constructor(arg0?: any);
  accept(arg0?: any, arg1?: any): any;
  createAclFile(arg0?: any, arg1?: any): any;
  setAclFile(arg0?: any): any;
  getAclFile(): any;
  getAclRules(): any;
  toJSON(): any;
}
export class AssetDeclaration {
  constructor(arg0?: any, arg1?: any);
  isRelationshipTarget(): any;
}
export class BaseException {
  constructor(arg0?: any);
}
export class BusinessNetworkDefinition {
  static fromArchive(arg0?: any): any;
  static fromDirectory(arg0?: any, arg1?: any): any;
  static processDirectory(arg0?: any, arg1?: any): any;
  static processFile(arg0?: any, arg1?: any): any;
  static walkSync(arg0?: any, arg1?: any, arg2?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  getIdentifier(): any;
  getMetadata(): any;
  getName(): any;
  getVersion(): any;
  getDescription(): any;
  toArchive(): any;
  accept(arg0?: any, arg1?: any): any;
  getIntrospector(): any;
  getFactory(): any;
  getSerializer(): any;
  getScriptManager(): any;
  getAclManager(): any;
  getModelManager(): any;
}
export class ClassDeclaration {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getModelFile(): any;
  process(): any;
  validate(): any;
  isAbstract(): any;
  isEnum(): any;
  isConcept(): any;
  isRelationshipTarget(): any;
  getName(): any;
  getFullyQualifiedName(): any;
  getIdentifierFieldName(): any;
  getOwnProperty(arg0?: any): any;
  getOwnProperties(): any;
  getSuperType(): any;
  getProperty(arg0?: any): any;
  getProperties(): any;
  toJSON(): any;
  toString(): any;
}
export class Concept {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  isConcept(): any;
}
export class ConceptDeclaration {
  constructor(arg0?: any, arg1?: any);
  isConcept(): any;
}
export class Connection {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  getConnectionManager(): any;
  getIdentifier(): any;
  disconnect(): any;
  login(arg0?: any, arg1?: any): any;
  deploy(arg0?: any, arg1?: any, arg2?: any): any;
  update(arg0?: any, arg1?: any): any;
  undeploy(arg0?: any, arg1?: any): any;
  ping(arg0?: any): any;
  queryChainCode(arg0?: any, arg1?: any, arg2?: any): any;
  invokeChainCode(arg0?: any, arg1?: any, arg2?: any): any;
  createIdentity(arg0?: any, arg1?: any, arg2?: any): any;
  list(arg0?: any): any;
  toJSON(): any;
}
export class ConnectionManager {
  constructor(arg0?: any);
  getConnectionProfileManager(): any;
  connect(arg0?: any, arg1?: any, arg2?: any): any;
  toJSON(): any;
}
export class ConnectionProfileManager {
  static registerConnectionManagerLoader(arg0?: any): any;
  static registerConnectionManager(arg0?: any, arg1?: any): any;
  static removeAllConnectionManagers(): any;
  constructor(arg0?: any);
  getConnectionProfileStore(): any;
  addConnectionManager(arg0?: any, arg1?: any): any;
  getConnectionManager(arg0?: any): any;
  connect(arg0?: any, arg1?: any): any;
  toJSON(): any;
}
export class ConnectionProfileStore {
  constructor();
  load(arg0?: any): any;
  save(arg0?: any, arg1?: any): any;
  loadAll(): any;
  delete(arg0?: any): any;
}
export class FSConnectionProfileStore {
  constructor(arg0?: any);
  load(arg0?: any): any;
  save(arg0?: any, arg1?: any): any;
  loadAll(): any;
  delete(arg0?: any): any;
}
export class Factory {
  constructor(arg0?: any);
  newInstance(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  newResource(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  newConcept(arg0?: any, arg1?: any, arg2?: any): any;
  newRelationship(arg0?: any, arg1?: any, arg2?: any): any;
  newTransaction(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  toJSON(): any;
}
export class FileWallet {
  static getHomeDirectory(): any;
  constructor(arg0?: any);
  list(): any;
  contains(arg0?: any): any;
  get(arg0?: any): any;
  add(arg0?: any, arg1?: any): any;
  update(arg0?: any, arg1?: any): any;
  remove(arg0?: any): any;
}
export class FileWriter {
  constructor(arg0?: any);
  openFile(arg0?: any): any;
  openRelativeFile(arg0?: any, arg1?: any): any;
  writeLine(arg0?: any, arg1?: any): any;
  writeBeforeLine(arg0?: any, arg1?: any): any;
  closeFile(): any;
}
export class Globalize {
  static messageFormatter(arg0?: any): any;
  static formatMessage(arg0?: any): any;
  constructor(arg0?: any);
}
export class Introspector {
  constructor(arg0?: any);
  accept(arg0?: any, arg1?: any): any;
  getClassDeclarations(): any;
  getClassDeclaration(arg0?: any): any;
  getModelManager(): any;
}
export class Logger {
  static setFunctionalLogger(arg0?: any): any;
  static getDebugEnv(): any;
  static getLoggerConfig(): any;
  static getLog(arg0?: any): any;
  static _setupLog(arg0?: any): any;
  static reset(): any;
  constructor(arg0?: any);
  intlog(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogMain(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogFirst(arg0?: any, arg1?: any, arg2?: any): any;
  debug(arg0?: any, arg1?: any, arg2?: any): any;
  warn(arg0?: any, arg1?: any, arg2?: any): any;
  info(arg0?: any, arg1?: any, arg2?: any): any;
  verbose(arg0?: any, arg1?: any, arg2?: any): any;
  error(arg0?: any, arg1?: any, arg2?: any): any;
  entry(arg0?: any, arg1?: any): any;
  exit(arg0?: any, arg1?: any): any;
}
export class LoopbackVisitor {
  constructor(arg0?: any);
  visit(arg0?: any, arg1?: any): any;
  visitModelManager(arg0?: any, arg1?: any): any;
  visitModelFile(arg0?: any, arg1?: any): any;
  visitAssetDeclaration(arg0?: any, arg1?: any): any;
  visitParticipantDeclaration(arg0?: any, arg1?: any): any;
  visitConceptDeclaration(arg0?: any, arg1?: any): any;
  visitTransactionDeclaration(arg0?: any, arg1?: any): any;
  visitClassDeclarationCommon(arg0?: any, arg1?: any, arg2?: any): any;
  visitField(arg0?: any, arg1?: any): any;
  visitEnumDeclaration(arg0?: any, arg1?: any): any;
  visitEnumValueDeclaration(arg0?: any, arg1?: any): any;
  visitRelationshipDeclaration(arg0?: any, arg1?: any): any;
}
export class ModelFile {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  accept(arg0?: any, arg1?: any): any;
  getModelManager(): any;
  getImports(): any;
  validate(): any;
  resolveType(arg0?: any, arg1?: any): any;
  isLocalType(arg0?: any): any;
  isImportedType(arg0?: any): any;
  resolveImport(arg0?: any): any;
  isDefined(arg0?: any): any;
  getType(arg0?: any): any;
  getFullyQualifiedTypeName(arg0?: any): any;
  getLocalType(arg0?: any): any;
  getAssetDeclaration(arg0?: any): any;
  getTransactionDeclaration(arg0?: any): any;
  getParticipantDeclaration(arg0?: any): any;
  getNamespace(): any;
  getFileName(): any;
  getName(): any;
  getAssetDeclarations(): any;
  getTransactionDeclarations(): any;
  getParticipantDeclarations(): any;
  getConceptDeclarations(): any;
  getEnumDeclarations(): any;
  getDeclarations(arg0?: any): any;
  getAllDeclarations(): any;
  getDefinitions(): any;
  toJSON(): any;
}
export class ModelManager {
  constructor();
  accept(arg0?: any, arg1?: any): any;
  addModelFile(arg0?: any, arg1?: any): any;
  updateModelFile(arg0?: any, arg1?: any): any;
  deleteModelFile(arg0?: any): any;
  addModelFiles(arg0?: any, arg1?: any): any;
  getModelFiles(): any;
  resolveType(arg0?: any, arg1?: any): any;
  clearModelFiles(): any;
  getModelFile(arg0?: any): any;
  getNamespaces(): any;
  getType(arg0?: any): any;
  getAssetDeclarations(): any;
  getTransactionDeclarations(): any;
  getParticipantDeclarations(): any;
  getEnumDeclarations(): any;
  getConceptDeclarations(): any;
  toJSON(): any;
}
export class ParticipantDeclaration {
  constructor(arg0?: any, arg1?: any);
  isRelationshipTarget(): any;
}
export class Property {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getParent(): any;
  process(): any;
  validate(arg0?: any): any;
  getName(): any;
  getType(): any;
  isOptional(): any;
  getFullyQualifiedTypeName(): any;
  getFullyQualifiedName(): any;
  getNamespace(): any;
  isArray(): any;
  isTypeEnum(): any;
  isPrimitive(): any;
  toJSON(): any;
}
export class Relationship {
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  toString(): any;
  isRelationship(): any;
}
export class Resource {
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  toString(): any;
  isResource(): any;
}
export class Script {
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  accept(arg0?: any, arg1?: any): any;
  getIdentifier(): any;
  getName(): any;
  getLanguage(): any;
  getContents(): any;
  getFunctionDeclarations(): any;
  toJSON(): any;
}
export class ScriptManager {
  constructor(arg0?: any);
  accept(arg0?: any, arg1?: any): any;
  createScript(arg0?: any, arg1?: any, arg2?: any): any;
  addScript(arg0?: any): any;
  updateScript(arg0?: any): any;
  deleteScript(arg0?: any): any;
  getScripts(): any;
  clearScripts(): any;
  getScript(arg0?: any): any;
  getScriptIdentifiers(): any;
  toJSON(): any;
}
export class SecurityContext {
  constructor(arg0?: any);
  getConnection(): any;
  getUser(): any;
  toJSON(): any;
}
export class SecurityException {
  constructor(arg0?: any);
}
export class Serializer {
  constructor(arg0?: any, arg1?: any);
  toJSON(arg0?: any, arg1?: any): any;
  fromJSON(arg0?: any, arg1?: any): any;
}
export class TransactionDeclaration {
  constructor(arg0?: any, arg1?: any);
  process(): any;
}
export class TypescriptVisitor {
  constructor();
  visit(arg0?: any, arg1?: any): any;
  visitModelManager(arg0?: any, arg1?: any): any;
  visitModelFile(arg0?: any, arg1?: any): any;
  visitEnumDeclaration(arg0?: any, arg1?: any): any;
  visitClassDeclaration(arg0?: any, arg1?: any): any;
  visitField(arg0?: any, arg1?: any): any;
  visitEnumValueDeclaration(arg0?: any, arg1?: any): any;
  visitRelationship(arg0?: any, arg1?: any): any;
  toTsType(arg0?: any): any;
}
export class Util {
  static securityCheck(arg0?: any): any;
  static queryChainCode(arg0?: any, arg1?: any, arg2?: any): any;
  static invokeChainCode(arg0?: any, arg1?: any, arg2?: any): any;
  static isNull(arg0?: any): any;
  constructor();
}
export class Wallet {
  static getWallet(): any;
  static setWallet(arg0?: any): any;
  constructor();
  list(): any;
  contains(arg0?: any): any;
  get(arg0?: any): any;
  add(arg0?: any, arg1?: any): any;
  update(arg0?: any, arg1?: any): any;
  remove(arg0?: any): any;
}
