{"version":3,"file":"browserfs.js","sourceRoot":"","sources":["../../../src/core/browserfs.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,+BAAiC;AACjC,qCAA2B;AAC3B,2BAA6B;AAE7B,0DAAoD;AA4E5C,kDAAY;AA3EpB,uCAAkC;AA2EA,2CAAU;AA1E5C,iCAAmC;AACnC,oCAAsC;AAyEQ,wBAAM;AAvEpD,EAAE,CAAC,CAAQ,OAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;AACtC,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,iBAAwB,GAAQ;IAC9B,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;IACpB,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;IACtB,IAAM,UAAU,GAAG,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;IACpD,4CAA4C;IAC5C,GAAG,CAAC,OAAO,GAAG,UAAS,GAAW;QAChC,IAAM,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAbD,0BAaC;AAED,4BAAmC,IAAY,EAAE,EAAyB;IACjE,qBAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AAC9B,CAAC;AAFD,gDAEC;AAQD,oBAA2B,MAAc;IACvC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACf,KAAK,IAAI;YACP,MAAM,CAAC,oBAAE,CAAC;QACZ,KAAK,MAAM;YACT,MAAM,CAAC,IAAI,CAAC;QACd,KAAK,QAAQ;YACX,kDAAkD;YAClD,MAAM,CAAC,MAAM,CAAC;QAChB,KAAK,SAAS;YACZ,MAAM,CAAC,OAAO,CAAC;QACjB,KAAK,WAAW;YACd,MAAM,CAAC,QAAQ,CAAC;QAClB;YACE,MAAM,CAAQ,qBAAS,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;AACH,CAAC;AAhBD,gCAgBC;AAED;;;;;GAKG;AACH,oBAA2B,MAAkB;IAC3C,MAAM,CAAC,oBAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC;AAFD,gCAEC","sourcesContent":["/**\n * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.\n */\n\nimport * as buffer from 'buffer';\nimport fs from './node_fs';\nimport * as path from 'path';\nimport {FileSystemConstructor, FileSystem} from './file_system';\nimport EmscriptenFS from '../generic/emscripten_fs';\nimport Backends from './backends';\nimport * as BFSUtils from './util';\nimport * as Errors from './api_error';\n\nif ((<any> process)['initializeTTYs']) {\n  (<any> process)['initializeTTYs']();\n}\n\n/**\n * Installs BrowserFS onto the given object.\n * We recommend that you run install with the 'window' object to make things\n * global, as in Node.\n *\n * Properties installed:\n *\n * * Buffer\n * * process\n * * require (we monkey-patch it)\n *\n * This allows you to write code as if you were running inside Node.\n * @param {object} obj - The object to install things onto (e.g. window)\n */\nexport function install(obj: any) {\n  obj.Buffer = Buffer;\n  obj.process = process;\n  const oldRequire = obj.require ? obj.require : null;\n  // Monkey-patch require for Node-style code.\n  obj.require = function(arg: string) {\n    const rv = BFSRequire(arg);\n    if (!rv) {\n      return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));\n    } else {\n      return rv;\n    }\n  };\n}\n\nexport function registerFileSystem(name: string, fs: FileSystemConstructor) {\n  (<any> Backends)[name] = fs;\n}\n\nexport function BFSRequire(module: 'fs'): typeof fs;\nexport function BFSRequire(module: 'path'): typeof path;\nexport function BFSRequire(module: 'buffer'): typeof buffer;\nexport function BFSRequire(module: 'process'): typeof process;\nexport function BFSRequire(module: 'bfs_utils'): typeof BFSUtils;\nexport function BFSRequire(module: string): any;\nexport function BFSRequire(module: string): any {\n  switch (module) {\n    case 'fs':\n      return fs;\n    case 'path':\n      return path;\n    case 'buffer':\n      // The 'buffer' module has 'Buffer' as a property.\n      return buffer;\n    case 'process':\n      return process;\n    case 'bfs_utils':\n      return BFSUtils;\n    default:\n      return (<any> Backends)[module];\n  }\n}\n\n/**\n * You must call this function with a properly-instantiated root file system\n * before using any file system API method.\n * @param {BrowserFS.FileSystem} rootFS - The root filesystem to use for the\n *   entire BrowserFS file system.\n */\nexport function initialize(rootfs: FileSystem) {\n  return fs.initialize(rootfs);\n}\n\nexport {EmscriptenFS, Backends as FileSystem, Errors};\n"]}